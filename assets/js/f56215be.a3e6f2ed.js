"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[129],{1860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=t(4848),c=t(8453);const o={id:"concat"},s=void 0,a={id:"concat",title:"concat",description:"concat() function",source:"@site/docs/concat.md",sourceDirName:".",slug:"/concat",permalink:"/docs/concat",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"concat"},sidebar:"api",previous:{title:"compress",permalink:"/docs/compress"},next:{title:"concurrent",permalink:"/docs/concurrent"}},i={},l=[{value:"concat() function",id:"concat-function",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"concat-function",children:"concat() function"}),"\n",(0,r.jsx)(n.p,{children:"Returns the result of concatenating the given iterable."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"declare function concat<A extends Iterable<unknown> | AsyncIterable<unknown>, B extends Iterable<unknown> | AsyncIterable<unknown>>(iterable1: A, iterable2: B): ReturnConcatType<A, B>;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const iter = concat([1, 2], [3, 4]);\r\niter.next() // {done:false, value: 1}\r\niter.next() // {done:false, value: 2}\r\niter.next() // {done:false, value: 3}\r\niter.next() // {done:false, value: 4}\r\niter.next() // {done:true, value: undefined}\r\n\r\n// with pipe\r\npipe(\r\n [3, 4],\r\n concat([1, 2]),\r\n toArray,\r\n); // [1, 2, 3, 4]\r\n\r\nawait pipe(\r\n Promise.resolve([3, 4]),\r\n concat([1, 2]),\r\n toArray,\r\n); // [1, 2, 3, 4]\r\n\r\n await pipe(\r\n [Promise.resolve(3), Promise.resolve(4)],\r\n toAsync,\r\n concat([1, 2]),\r\n toArray,\r\n); // [1, 2, 3, 4]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://codesandbox.io/s/fxts-concat-mhd7d",children:"Try It"})}),"\n",(0,r.jsxs)(n.p,{children:["see ",(0,r.jsx)(n.a,{href:"https://fxts.dev/docs/pipe",children:"pipe"}),", ",(0,r.jsx)(n.a,{href:"https://fxts.dev/docs/toAsync",children:"toAsync"}),", ",(0,r.jsx)(n.a,{href:"https://fxts.dev/docs/toArray",children:"toArray"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/marpple/FxTS/blob/main/src/Lazy/concat.ts",children:"Open Source Code"})})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const c={},o=r.createContext(c);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);