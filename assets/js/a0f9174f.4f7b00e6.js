"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4873],{753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(4848),r=n(8453);const s={id:"flatMap"},o=void 0,l={id:"flatMap",title:"flatMap",description:"flatMap() function",source:"@site/docs/flatMap.md",sourceDirName:".",slug:"/flatMap",permalink:"/docs/flatMap",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"flatMap"},sidebar:"api",previous:{title:"flat",permalink:"/docs/flat"},next:{title:"fork",permalink:"/docs/fork"}},i={},c=[{value:"flatMap() function",id:"flatmap-function",level:2},{value:"Example",id:"example",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"flatmap-function",children:"flatMap() function"}),"\n",(0,a.jsx)(t.p,{children:"Returns flattened Iterable/AsyncIterable of values by running each element flattening the mapped results."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Signature:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"declare function flatMap<A, B = unknown>(f: (a: A) => B, iterable: Iterable<A>): IterableIterator<DeepFlatSync<B, 1>>;\n"})}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'const iter = flatMap(s => s.split(" "), ["It is", "a good", "day"]);\r\niter.next() // {done:false, value: "It"}\r\niter.next() // {done:false, value: "is"}\r\niter.next() // {done:false, value: "a"}\r\niter.next() // {done:false, value: "good"},\r\niter.next() // {done:false, value: "day"},\r\niter.next() // {done:true, value: undefined}\r\n\r\n// with pipe\r\npipe(\r\n ["It is", "a good", "day"],\r\n flatMap(s => s.split(" ")),\r\n toArray,\r\n); // ["It", "is", "a", "good", "day"]\r\n\r\nawait pipe(\r\n Promise.resolve(["It is", "a good", "day"]),\r\n flatMap(s => s.split(" ")),\r\n toArray,\r\n); // ["It", "is", "a", "good", "day"]\r\n\r\n// if you want to use asynchronous callback\r\nawait pipe(\r\n Promise.resolve(["It is", "a good", "day"]),\r\n toAsync,\r\n flatMap(async (s) => s.split(" ")),\r\n toArray,\r\n); // ["It", "is", "a", "good", "day"]\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://codesandbox.io/s/fxts-flatmap-3g9k8",children:"Try It"})}),"\n",(0,a.jsxs)(t.p,{children:["see ",(0,a.jsx)(t.a,{href:"https://fxts.dev/docs/pipe",children:"pipe"}),", ",(0,a.jsx)(t.a,{href:"https://fxts.dev/docs/toAsync",children:"toAsync"}),", ",(0,a.jsx)(t.a,{href:"https://fxts.dev/docs/toArray",children:"toArray"})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://github.com/marpple/FxTS/blob/main/src/Lazy/flatMap.ts",children:"Open Source Code"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var a=n(6540);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);