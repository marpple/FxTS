"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1923],{3912:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var t=n(4848),o=n(8453);const a={id:"fork"},s=void 0,d={id:"fork",title:"fork",description:"fork() function",source:"@site/docs/fork.md",sourceDirName:".",slug:"/fork",permalink:"/docs/fork",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"fork"},sidebar:"api",previous:{title:"flatMap",permalink:"/docs/flatMap"},next:{title:"fx",permalink:"/docs/fx"}},l={},c=[{value:"fork() function",id:"fork-function",level:2},{value:"Example",id:"example",level:2}];function i(e){const r={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"fork-function",children:"fork() function"}),"\n",(0,t.jsx)(r.p,{children:"Returns an iterable of forks of original source. Each fork contains the same values as source, and can be consumed independently."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Signature:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"declare function fork<A extends Iterable<unknown> | AsyncIterable<unknown>>(iterable: A): ReturnForkType<A>;\n"})}),"\n",(0,t.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const arr = [1, 2, 3];\r\nconst iter1 = fork(arr);\r\nconst iter2 = fork(arr);\r\n\r\niter1.next() // {done:false, value: 1}\r\niter1.next() // {done:false, value: 2}\r\niter2.next() // {done:false, value: 1}\r\niter2.next() // {done:false, value: 2}\r\n\r\nconst str = 'abc'\r\nconst strIter1 = fork(str);\r\nconst strIter2 = fork(str);\r\n\r\nstrIter1.next() // {done:false, value: 'a'}\r\nstrIter1.next() // {done:false, value: 'b'}\r\nstrIter2.next() // {done:false, value: 'a'}\r\nstrIter2.next() // {done:false, value: 'b'}\r\n\r\n// with pipe\r\nconst arrAdd10 = pipe(\r\n  [1, 2, 3],\r\n  map((a) => a + 10),\r\n);\r\n\r\nconst arrAdd10Iter1 = fork(arrAdd10);\r\nconst arrAdd10Iter2 = fork(arrAdd10);\r\narrAdd10Iter1.next() // { value: 11, done: false }\r\narrAdd10Iter2.next() // { value: 11, done: false }\r\n\r\nconst arrAdd10Iter3 = fork(arrAdd10Iter1);\r\narrAdd10Iter1.next() // { value: 12, done: false }\r\narrAdd10Iter1.next() // { value: 13, done: false }\r\narrAdd10Iter2.next() // { value: 12, done: false }\r\narrAdd10Iter3.next() // { value: 12, done: false }\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/marpple/FxTS/blob/main/src/Lazy/fork.ts",children:"Open Source Code"})})]})}function f(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>d});var t=n(6540);const o={},a=t.createContext(o);function s(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);