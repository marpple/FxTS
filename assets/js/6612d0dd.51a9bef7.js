"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1554],{326:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(4848),s=t(8453);const a={id:"takeWhile"},i=void 0,o={id:"takeWhile",title:"takeWhile",description:"takeWhile() function",source:"@site/docs/takeWhile.md",sourceDirName:".",slug:"/takeWhile",permalink:"/docs/takeWhile",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"takeWhile"},sidebar:"api",previous:{title:"takeUntilInclusive",permalink:"/docs/takeUntilInclusive"},next:{title:"toAsync",permalink:"/docs/toAsync"}},l={},c=[{value:"takeWhile() function",id:"takewhile-function",level:2},{value:"Example",id:"example",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"takewhile-function",children:"takeWhile() function"}),"\n",(0,r.jsxs)(n.p,{children:["Returns Iterable/AsyncIterable that taken values as long as each value satisfies the give ",(0,r.jsx)(n.code,{children:"f"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"declare function takeWhile<A, B>(f: (a: A) => B, iterable: Iterable<A>): IterableIterator<A>;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const iter = takeWhile(a => a < 3, [1, 2, 3, 4, 5, 6]);\r\niter.next() // {done:false, value: 1}\r\niter.next() // {done:false, value: 2}\r\niter.next() // {done:true, value: undefined}\r\n\r\n// with pipe\r\npipe(\r\n [1, 2, 3, 4, 5, 6],\r\n takeWhile(a => a < 3),\r\n toArray,\r\n); // [1, 2]\r\n\r\nawait pipe(\r\n Promise.resolve([1, 2, 3, 4, 5, 6]),\r\n takeWhile(a => a < 3),\r\n toArray,\r\n); // [1, 2]\r\n\r\n// if you want to use asynchronous callback\r\nawait pipe(\r\n Promise.resolve([1, 2, 3, 4, 5, 6]),\r\n toAsync,\r\n takeWhile(async (a) => a < 3),\r\n toArray,\r\n); // [1, 2]\r\n\r\n// with toAsync\r\nawait pipe(\r\n [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3),\r\nPromise.resolve(4), Promise.resolve(5), Promise.resolve(6)],\r\n toAsync,\r\n takeWhile(a => a < 3),\r\n toArray,\r\n); // [1, 2]\r\n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://codesandbox.io/s/fxts-takewhile-e6gqt",children:"Try It"})}),"\n",(0,r.jsxs)(n.p,{children:["see ",(0,r.jsx)(n.a,{href:"https://fxts.dev/docs/pipe",children:"pipe"}),", ",(0,r.jsx)(n.a,{href:"https://fxts.dev/docs/toAsync",children:"toAsync"}),", ",(0,r.jsx)(n.a,{href:"https://fxts.dev/docs/toArray",children:"toArray"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/marpple/FxTS/blob/main/src/Lazy/takeWhile.ts",children:"Open Source Code"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);