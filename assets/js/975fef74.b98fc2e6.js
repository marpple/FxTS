"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5610],{646:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>m});var o=t(4848),i=t(8453);const r={id:"memoize"},s=void 0,c={id:"memoize",title:"memoize",description:"memoize() function",source:"@site/docs/memoize.md",sourceDirName:".",slug:"/memoize",permalink:"/docs/memoize",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"memoize"},sidebar:"api",previous:{title:"max",permalink:"/docs/max"},next:{title:"min",permalink:"/docs/min"}},a={},m=[{value:"memoize() function",id:"memoize-function",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"memoize-function",children:"memoize() function"}),"\n",(0,o.jsxs)(n.p,{children:["Creates a new function that, stores the results of its calculations in a ",(0,o.jsx)(n.a,{href:"http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object",children:"Map"}),". When the function is called with same input again, it retrieves the cached result instead of recalculating it. If resolver is provided, it determines the cache key for storing the result based on the arguments provided to the memoized function. By default, the first argument provided to the memoized function is used as the map cache key"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"declare function memoize<F extends (...args: any[]) => any, K extends Parameters<F>[0], Return extends F & {\r\n    cache: K extends object ? WeakMap<K, ReturnType<F>> : Map<K, ReturnType<F>>;\r\n}>(f: F): Return;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const add10 = (a: number): number => a + 10;\r\n\r\nconst memoized = memoize(add10);\r\nconsole.log(memoized(5)); // 15\r\nconsole.log(memoized(10)) // 20\r\nconsole.log(memoized(5)); // 15 (cached)\r\n\r\nmemoized.cache.clear(); // clear cache\r\nconsole.log(memoized(5)); // 15 (no cache)\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/marpple/FxTS/blob/main/src/memoize.ts",children:"Open Source Code"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(6540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);