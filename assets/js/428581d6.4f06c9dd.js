"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7959],{2726:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>x,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=t(4848),s=t(8453);const o={id:"fx"},c=void 0,a={id:"fx",title:"fx",description:"fx() function",source:"@site/docs/fx.md",sourceDirName:".",slug:"/fx",permalink:"/docs/fx",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"fx"},sidebar:"api",previous:{title:"fork",permalink:"/docs/fork"},next:{title:"intersection",permalink:"/docs/intersection"}},i={},d=[{value:"fx() function",id:"fx-function",level:2},{value:"Example",id:"example",level:2}];function l(n){const e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"fx-function",children:"fx() function"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"fx"})," allows functions provided by existing ",(0,r.jsx)(e.code,{children:"fxts"})," to be used in a method chaining. Not all functions are provided as methods and can be connected through ",(0,r.jsx)(e.code,{children:"chain"})," if necessary."]}),"\n",(0,r.jsxs)(e.p,{children:["see ",(0,r.jsx)(e.a,{href:"https://fxts.dev/docs/method-chaining",children:"guide"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"declare function fx<T extends Iterable<unknown> | AsyncIterable<unknown>>(a: T): T extends Iterable<unknown> ? FxIterable<IterableInfer<T>> : FxAsyncIterable<IterableInfer<T>>;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const syncArr1 = fx([1, 2, 3, 4])\r\n  .map((a) => a + 10)\r\n  .toArray(); // [11, 12, 13, 14]\r\n\r\n// If you want to use another function that is not provided for the method, use `chain`.\r\nconst syncArr2 = fx([1, 2, 3, 4])\r\n  .chain(append(5))\r\n  .map((a) => a + 10)\r\n  .toArray(); // [11, 12, 13, 14, 15]\r\n\r\nconst asyncArr1 = await fx([1, 2, 3, 4])\r\n  .toAsync()\r\n  .map((a) => a + 10)\r\n  .toArray(); // [11, 12, 13, 14]\r\n\r\nconst asyncArr2 = await fx(toAsync([1, 2, 3, 4]))\r\n  .map((a) => a + 10)\r\n  .toArray(); // [11, 12, 13, 14]\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://github.com/marpple/FxTS/blob/main/src/Lazy/fx.ts",children:"Open Source Code"})})]})}function x(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function c(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:c(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);